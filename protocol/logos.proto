syntax = "proto2";

package logos.protocol.messages;

message CommandSet {
  repeated Command command = 1;
}

/**
 * Unfortunately, neither goog.proto2.Message nor protobuf-plugin-closure
 * support protobuf extensions. This could help solve the "union type" problem
 * that the Command#type field is used for. It would also allow for an elegant
 * extension mechanism outside of this file, but it's just not possible without
 * a lot of work.
 *
 * @see https://code.google.com/p/protobuf-plugin-closure/issues/detail?id=7
 * @see https://groups.google.com/forum/#!msg/protobuf/XcXGlcIDxLM/DLLuRqU9N88J
 * For the second link read the message by Kenton Varda, author of proto2.
 */
message Command {
  optional Type type = 1 [default = NOOP];

  enum Type {
    // Skip 1 so that Type values match Command tags
    NOOP = 2;
    ADD_CONVERSATION = 3;
    ADD_THREAD = 4;
    ADD_COMMENT = 5;
    ADD_USER = 6;
  }

  optional NoopCommand noop_command = 2;
  optional AddConversationCommand add_conversation_command = 3;
  optional AddThreadCommand add_thread_command = 4;
  optional AddCommentCommand add_comment_command = 5;
  optional AddUserCommand add_user_command = 6;

  message NoopCommand {}

  message AddConversationCommand {
    optional Conversation conversation = 1;
  }

  message AddThreadCommand {
    optional Thread thread = 1;
    optional string conversation_id = 2;
  }

  message AddCommentCommand {
    optional Comment comment = 1;
    optional string conversation_id = 2;
    optional string thread_id = 3;
  }

  message AddUserCommand {
    optional User user = 1;
  }
}

/** A conversation has many threads. */
message Conversation {
  optional string id = 1;
}

/** A conversation has many comments. */
message Thread {
  optional string id = 1;
  optional Topic topic = 2;
}

message Comment {
  optional string id = 1;
  optional string body = 2;
  optional int32 modified_timestamp = 3;
  optional string user_id = 4;
}

message Topic {
  optional Type type = 1 [default = MAIN];

  // TODO(erick): I feel like Topic type is a major extensibility
  // mistake waiting to happen.
  enum Type {
    MAIN = 1;
  }
}

message User {
  optional string id = 1;
  optional string email = 2;
  optional string handle = 3;
}
